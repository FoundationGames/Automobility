plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
}

version = "${project.mod_version}+${project.minecraft_version}-fabric" as Object

repositories {
    mavenLocal()
    maven { url = 'https://maven.fabricmc.net' }
    maven { url = 'https://maven.gegy.dev/' }
    maven { url = 'https://maven.terraformersmc.com/' }
    maven { url = 'https://aperlambda.github.io/maven' }
    maven { url = 'https://ueaj.dev/maven' }
    maven { url = 'https://api.modrinth.com/maven' }
    maven { url = 'https://maven.parchmentmc.org' }
    maven { url = 'https://maven.isxander.dev/releases' }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://jitpack.io' }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_release}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_version}"

    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_api_version}" // models api deprecated - breaks runtime

    // Mightnight Controls Support
    modImplementation "dev.lambdaurora:spruceui:${project.spruceui_version}"
    modImplementation "maven.modrinth:midnightlib:${project.midnightlib_version}-fabric"
    modCompileOnly "maven.modrinth:midnightcontrols:${project.midnightcontrols_version}"
    api('org.aperlambda:lambdajcommon:1.8.1') {
        exclude group: 'com.google.code.gson'
        exclude group: 'com.google.guava'
    }

    // Controlify Support
    modImplementation "dev.isxander:controlify:${project.controlify_version}"

    // Json entity models
    modImplementation "maven.modrinth:jsonem:${project.jsonem_version}"
    include "maven.modrinth:jsonem:${project.jsonem_version}"

    implementation project(':common')
}

processResources {
    from project(":common").sourceSets.main.resources

    inputs.property 'version', project.version
    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }
}

tasks.withType(JavaCompile) {
    source(project(':common').sourceSets.main.allSource)
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release = 17
}

loom {
    runs {
        client {
            setConfigName('(Fabric) Client')
            ideConfigGenerated(true)
            runDir('run')
            client()
        }
        server {
            setConfigName('(Fabric) Server')
            ideConfigGenerated(true)
            runDir('run')
            server()
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {
    }
}
